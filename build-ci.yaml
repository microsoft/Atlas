steps:

# Node Tool Installer
# Finds or Downloads and caches specified version spec of Node and adds it to the PATH.
- task: NodeTool@0
  inputs:
    #versionSpec: '6.x' 
    checkLatest: true # Optional

# .NET Core Tool Installer
# Acquires a specific version of .NET Core from internet or the tools cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks.
- task: DotNetCoreInstaller@0
  inputs:
    packageType: 'sdk' # Options: runtime, sdk
    version: '2.1.401' 

- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    arguments: --force

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  continueOnError: true
  inputs:
    governanceProduct: '70f3e0d8-e9ab-e811-bce7-00155d7fb5a6'  

- task: DotNetCoreCLI@2
  displayName: dotnet build

- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: test
    projects: 'test/**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: dotnet publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: 'src/Microsoft.Atlas.CommandLine/Microsoft.Atlas.CommandLine.csproj'
    arguments: '-o $(Build.ArtifactStagingDirectory)/atlas'
    zipAfterPublish: false
    modifyOutputPath: false

- task: DotNetCoreCLI@2
  displayName: dotnet pack
  inputs:
    command: pack
    packagesToPack: 'src/Microsoft.Atlas.CommandLine/Microsoft.Atlas.CommandLine.csproj'
    configuration: Release
    packDirectory: '$(Build.ArtifactStagingDirectory)/tools'

- task: DotNetCoreCLI@2
  displayName: 'dotnet tarball'
  inputs:
    command: custom
    projects: src/Microsoft.Atlas.CommandLine/Microsoft.Atlas.CommandLine.csproj
    custom: msbuild
    arguments: '/t:Restore,CreateTarball /p:RuntimeIdentifier=linux-x64 /p:TargetFramework=netcoreapp2.1 /p:Configuration=Release /p:ArchiveDir=$(Build.ArtifactStagingDirectory)/downloads'

- task: DotNetCoreCLI@2
  displayName: 'dotnet zip'
  inputs:
    command: custom
    projects: src/Microsoft.Atlas.CommandLine/Microsoft.Atlas.CommandLine.csproj
    custom: msbuild
    arguments: '/t:Restore,CreateZip /p:RuntimeIdentifier=win10-x64 /p:TargetFramework=netcoreapp2.1 /p:Configuration=Release /p:ArchiveDir=$(Build.ArtifactStagingDirectory)/downloads'

- task: DotNetCoreCLI@2
  displayName: dotnet pack chocolatey
  inputs:
    command: pack
    packagesToPack: 'src/Microsoft.Atlas.CommandLine.Chocolatey/Microsoft.Atlas.CommandLine.Chocolatey.csproj'
    configuration: Release
    packDirectory: '$(Build.ArtifactStagingDirectory)/chocolatey'

- task: CopyFiles@2
  displayName: 'copy examples to $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: examples
    TargetFolder: '$(Build.ArtifactStagingDirectory)/examples'

- script: |
    npm install -g typescript
    npm install -g tfx-cli

    cd $(Build.SourcesDirectory)/src/Tasks/AtlasInstallerV0
    sed -ri 's/"Patch": [0-9]+/"Patch": $(Build.BuildId)/' task.json
    npm install
    tsc

    cd $(Build.SourcesDirectory)/src/Tasks/AtlasV0
    sed -ri 's/"Patch": [0-9]+/"Patch": $(Build.BuildId)/' task.json
    npm install
    tsc

    cd $(Build.SourcesDirectory)/src/Tasks
    sed -ri 's/"version": "0.1.[0-9]+"/"version": "0.1.$(Build.BuildId)"/' vss-extension.json
    tfx extension create --manifest-globs vss-extension.json --output-path $(Build.ArtifactStagingDirectory)/vsts

- task: PublishBuildArtifacts@1
  displayName: publish artifacts
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
