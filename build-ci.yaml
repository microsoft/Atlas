steps:

- script: |
    set -e # script should fail with first non-zero exit code

    test_container_name=test-$(Build.BuildId)
    publish_container_name=publish-$(Build.BuildId)

    build_args=""
    build_args+=" --build-arg BUILD_BUILDID=${BUILD_BUILDID}"
    build_args+=" --build-arg BUILD_REPOSITORY_URI=${BUILD_REPOSITORY_URI}"
    build_args+=" --build-arg BUILD_SOURCEBRANCHNAME=${BUILD_SOURCEBRANCHNAME}"
    build_args+=" --build-arg BUILD_SOURCEVERSION=${BUILD_SOURCEVERSION}"
    
    # Create and run tests
    echo "docker build -f Dockerfile.cli --target test --tag atlas-cli-test:0.1.$(Build.BuildId)"
    docker build -f Dockerfile.cli ${build_args} --target test --tag atlas-cli-test:0.1.$(Build.BuildId) .
    docker run --name ${test_container_name} atlas-cli-test:0.1.$(Build.BuildId)
    docker cp ${test_container_name}:/app/test/Microsoft.Atlas.CommandLine.Tests/TestResults/. $(Build.ArtifactStagingDirectory)/TestResults
    docker rm ${test_container_name}

    # Package artifacts to publish
    echo "docker build -f Dockerfile.cli --target publish --tag atlas-cli-publish:0.1.$(Build.BuildId)"
    docker build -f Dockerfile.cli ${build_args} --target publish --tag atlas-cli-publish:0.1.$(Build.BuildId) .
    docker create --name ${publish_container_name} atlas-cli-publish:0.1.$(Build.BuildId)
    docker cp ${publish_container_name}:/out/. $(Build.ArtifactStagingDirectory)
    docker rm ${publish_container_name}

    # Build docker image to publish
    echo "docker build -f Dockerfile.cli --target runtime --tag atlasprivate.azurecr.io/microsoft/atlas-cli:0.1.$(Build.BuildId)"
    docker build -f Dockerfile.cli ${build_args} --target runtime --tag atlasprivate.azurecr.io/microsoft/atlas-cli:0.1.$(Build.BuildId) .

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/TestResults/*.trx'

# Node Tool Installer
# Finds or Downloads and caches specified version spec of Node and adds it to the PATH.
- task: NodeTool@0
  inputs:
    #versionSpec: '6.x' 
    checkLatest: true # Optional

# .NET Core Tool Installer
# Acquires a specific version of .NET Core from internet or the tools cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks.
- task: DotNetCoreInstaller@0
  inputs:
    packageType: 'sdk' # Options: runtime, sdk
    version: '2.1.401' 

- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    arguments: --force

- task: ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  continueOnError: true
  inputs:
    governanceProduct: '70f3e0d8-e9ab-e811-bce7-00155d7fb5a6'  

- task: CopyFiles@2
  displayName: 'copy examples to $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: examples
    TargetFolder: '$(Build.ArtifactStagingDirectory)/examples'

- script: |
    npm install -g typescript
    npm install -g tfx-cli

    cd $(Build.SourcesDirectory)/src/Tasks/AtlasInstallerV0
    sed -ri 's/"Patch": [0-9]+/"Patch": $(Build.BuildId)/' task.json
    npm install
    tsc

    cd $(Build.SourcesDirectory)/src/Tasks/AtlasV0
    sed -ri 's/"Patch": [0-9]+/"Patch": $(Build.BuildId)/' task.json
    npm install
    tsc

    cd $(Build.SourcesDirectory)/src/Tasks
    sed -ri 's/"version": "0.1.[0-9]+"/"version": "0.1.$(Build.BuildId)"/' vss-extension.json
    tfx extension create --manifest-globs vss-extension.json --output-path $(Build.ArtifactStagingDirectory)/vsts

- task: Docker@1
  displayName: 'docker push atlasprivate.azurecr.io/microsoft/atlas-cli'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    azureSubscriptionEndpoint: 'atlas-downloads'
    azureContainerRegistry: atlasprivate.azurecr.io
    command: 'Push an image'
    imageName: 'microsoft/atlas-cli:0.1.$(Build.BuildId)'
    includeSourceTags: true

- task: PublishBuildArtifacts@1
  displayName: publish artifacts
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'


