
# Declaring secret {{ secret vsts.token }}

operations:
- message: Validating inputs
- {condition: (!azure.tenant),       output: { missing: {azure: {tenant: or --set azure.tenant=AAD_TENANT_ID }}}}
- {condition: (!azure.subscription), output: { missing: {azure: {subscription: or --set azure.subscription=AZURE_SUBSCRIPTION_ID }}}}
- {condition: (!latest.version),     output: { missing: {latest: {version: or --set latest.version=SEMVER_VERSION }}}}
- {condition: (!latest.drop),        output: { missing: {latest: {version: or --set latest.drop=BUILD_ARTIFACTS_DIRECTORY }}}}

- message: Input validation failed
  condition: (missing != null)
  throw:
    message: >
      This workflow is missing information which is
      needed to run.      

      Please add them to a values.yaml file in the
      current directory, or provide the missing values
      as command line options.
    details: (missing)

- output:
    request:
      auth:
        tenant: ( azure.tenant )
      parameters:
        subscriptionId: ( azure.subscription )
        resourceGroupName: ( azure.resourceGroupName )
        deploymentName: cdn-and-storage-{{ guid (datetime add="PT0S") }}
    resourceGroup:
      put:
        location: ( azure.location )
    deployment:
      put:
        properties:
          mode: Incremental
          template: {{> azuredeploy.json }}
          parameters: 
            location:
              value: {{ azure.location }}
  
- message: Preparing resource group
  values:
    request:
      body: ( resourceGroup.put )
  request: apis/azure/ResourceManagementClient/ResourceGroups/CreateOrUpdate.yaml
  output:
    resourceGroup:
      get: ( result.body )

- message: Deploying cdn and storage account
  operations:
  - message: Creating deployment
    values:
      request:
        body: ( deployment.put )
    request: apis/azure/ResourceManagementClient/Deployments/CreateOrUpdate.yaml
    output:
      deployment:
        get: ( result.body )
  
  - message: Waiting for deployment to complete...
    request: apis/azure/ResourceManagementClient/Deployments/Get.yaml
    output:
      deployment:
        get: ( result.body )
    repeat:
      condition: deployment.get.properties.provisioningState == 'Accepted' || deployment.get.properties.provisioningState == 'Running'
      delay: PT5S
      timeout: PT4M

  - message: Deployment failed
    condition: deployment.get.properties.provisioningState != 'Succeeded'
    throw: 
      message: (['Deployment provisioning state is "', deployment.get.properties.provisioningState, '". ', deployment.get.properties.error.message])
      details: (deployment.get.properties.error)

  output:
    deployment:
      get: ( deployment.get )
    storage:
      account: (deployment.get.properties.outputs.storageAccountName.value)

- message: Getting storage keys
  values:
    request:
      parameters:
        accountName: ( storage.account )
  request: apis/azure/StorageManagementClient/StorageAccounts/ListKeys.yaml
  output: 
    storage:
      key: ( result.body.keys[0].value )

- message: Writing sleet.json
  template: sleet.json
  write: sleet.json

- message: Writing sleet-push.cmd
  template: sleet-push.cmd
  write: sleet-push.cmd

- message: Writing sleet-push.sh
  template: sleet-push.sh
  write: sleet-push.sh

- message: Sending atlas-{{ latest.version }}-win10-x64.zip
  values:
    blob: 
      path: atlas-{{ latest.version }}-win10-x64.zip
      file: {{ latest.drop }}/downloads/atlas-{{ latest.version }}-win10-x64.zip
      contentType: application/zip
  request: apis/azure/storage/blob-put-binary.yaml

- message: Sending atlas-{{ latest.version }}-linux-x64.tar.gz
  values:
    blob: 
      path: atlas-{{ latest.version }}-linux-x64.tar.gz
      file: {{ latest.drop }}/downloads/atlas-{{ latest.version }}-linux-x64.tar.gz
      contentType: application/x-gtar
  request: apis/azure/storage/blob-put-binary.yaml

- message: Sending atlas-latest-win10-x64.zip
  values:
    blob: 
      path: atlas-latest-win10-x64.zip
      file: {{ latest.drop }}/downloads/atlas-{{ latest.version }}-win10-x64.zip
      contentType: application/zip
  request: apis/azure/storage/blob-put-binary.yaml

- message: Sending atlas-latest-linux-x64.tar.gz
  values:
    blob: 
      path: atlas-latest-linux-x64.tar.gz
      file: {{ latest.drop }}/downloads/atlas-{{ latest.version }}-linux-x64.tar.gz
      contentType: application/x-gtar
  request: apis/azure/storage/blob-put-binary.yaml

- message: Sending latest.json
  values:
    blob: 
      path: latest.json
      body: {{> latest.json }}
  request: apis/azure/storage/blob-put-json.yaml
