
values: {{{ json }}}

# Declaring secret {{ secret vsts.token }}

operations:
- message: Validating inputs
- {condition: (!azure.tenant),       output: { missing: {azure: {tenant: or --set azure.tenant=AAD_TENANT_ID }}}}
- {condition: (!azure.subscription), output: { missing: {azure: {subscription: or --set azure.subscription=AZURE_SUBSCRIPTION_ID }}}}

- message: Input validation failed
  condition: (missing != null)
  throw:
    message: >
      This workflow is missing information which is
      needed to run.      

      Please add them to a values.yaml file in the
      current directory, or provide the missing values
      as command line options.
    details: (missing)

- message: Preparing resource group
  request: apis/azure/resourcegroups/apply.yaml

- message: Deploying cdn and storage account
  values:
    deployment:
      name: cdn-and-storage-{{ guid (datetime add="PT0S") }}
      properties:
        mode: Incremental
        template: {{> azuredeploy.json }}
        parameters: 
          location:
            value: {{ azure.location }}
  operations:
  - message: Creating deployment
    request: apis/azure/deployments/apply.yaml

  - message: Waiting for deployment to complete...
    request: apis/azure/deployments/get.yaml
    output:
      deploymentStatus: (result.body)
    repeat:
      condition: deploymentStatus.properties.provisioningState == 'Accepted' || deploymentStatus.properties.provisioningState == 'Running'
      delay: PT5S
      timeout: PT4M

  - message: Deployment failed
    condition: deploymentStatus.properties.provisioningState != 'Succeeded'
    throw: 
      message: (['Deployment provisioning state is "', deploymentStatus.properties.provisioningState, '". ', deploymentStatus.properties.error.message])
      details: (deploymentStatus.properties.error)

  output:
    deployment: (deploymentStatus.properties.{state:provisioningState, error:error, outputs:outputs})
    storage:
      account: (deploymentStatus.properties.outputs.storageAccountName.value)

- message: Getting storage keys
  request: apis/azure/storage/listkeys.yaml
  output: 
    storage:
      key: (result.body.keys[0].value)

- message: Writing sleet.json
  template: sleet.json
  write: sleet.json

- message: Writing sleet-push.cmd
  template: sleet-push.cmd
  write: sleet-push.cmd

- message: Writing sleet-push.sh
  template: sleet-push.sh
  write: sleet-push.sh

- message: Sending atlas-{{ latest.version }}-win10-x64.zip
  values:
    blob: 
      path: atlas-{{ latest.version }}-win10-x64.zip
      file: {{ latest.drop }}/downloads/atlas-{{ latest.version }}-win10-x64.zip
      contentType: application/zip
  request: apis/azure/storage/blob-put-binary.yaml

- message: Sending atlas-{{ latest.version }}-linux-x64.tar.gz
  values:
    blob: 
      path: atlas-{{ latest.version }}-linux-x64.tar.gz
      file: {{ latest.drop }}/downloads/atlas-{{ latest.version }}-linux-x64.tar.gz
      contentType: application/x-gtar
  request: apis/azure/storage/blob-put-binary.yaml

- message: Sending atlas-latest-win10-x64.zip
  values:
    blob: 
      path: atlas-latest-win10-x64.zip
      file: {{ latest.drop }}/downloads/atlas-{{ latest.version }}-win10-x64.zip
      contentType: application/zip
  request: apis/azure/storage/blob-put-binary.yaml

- message: Sending atlas-latest-linux-x64.tar.gz
  values:
    blob: 
      path: atlas-latest-linux-x64.tar.gz
      file: {{ latest.drop }}/downloads/atlas-{{ latest.version }}-linux-x64.tar.gz
      contentType: application/x-gtar
  request: apis/azure/storage/blob-put-binary.yaml

- message: Sending latest.json
  values:
    blob: 
      path: latest.json
      body: {{> latest.json }}
  request: apis/azure/storage/blob-put-json.yaml
